name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install pytest pytest-cov pytest-xdist
          pip install xarray netCDF4 cftime scikit-learn
      
      - name: Run tests with coverage
        run: |
          pytest --cov=metdatapy --cov-report=xml --cov-report=term -v
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy
          pip install -e .
      
      - name: Run ruff
        run: ruff check metdatapy tests --output-format=github
        continue-on-error: true
      
      - name: Run black
        run: black --check metdatapy tests
        continue-on-error: true
      
      - name: Run isort
        run: isort --check-only metdatapy tests
        continue-on-error: true
      
      - name: Run mypy
        run: mypy metdatapy --ignore-missing-imports
        continue-on-error: true

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install mkdocs mkdocs-material mkdocstrings[python]
      
      - name: Build documentation
        run: |
          mkdocs build --strict --verbose
      
      - name: Check for broken links
        run: |
          pip install linkchecker
          linkchecker site/ --no-warnings --ignore-url=http --ignore-url=https
        continue-on-error: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install xarray netCDF4 cftime scikit-learn matplotlib seaborn
      
      - name: Generate sample data
        run: |
          cd data
          python generate_sample_data.py
      
      - name: Run complete workflow
        run: |
          cd examples
          python complete_workflow.py
      
      - name: Run NetCDF export example
        run: |
          cd examples
          python netcdf_export_example.py
      
      - name: Verify outputs
        run: |
          test -f data/processed/weather_clean_hourly.parquet || exit 1
          test -f data/processed/weather_data_hourly.nc || exit 1
          echo "All integration tests passed!"

  package:
    name: Build and Check Package
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest
      
      - name: Check manifest
        run: check-manifest
        continue-on-error: true
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/


